FUZZ {
  Program      = "yoo!" Body
  Body         = Statement+
  Statement    = VarDec
               | "iph" Exp Body "~"
                 ("elz iph" Exp Body "~")*
                 ("elz" Body "~")?                -- iph
               | "while" Exp Body "~"             -- while
               | Lvalue "=" Exp                   -- assign
               | "chill"                          -- chill
               | Returnt                          -- returnt
               | Call
               | FunDec
               | Exp1
  VarDec       = "fuzz" Type id "=" Exp
  Returnt      = "returnt" Exp
  Exps         = ListOf<Exp, ",">
  Exp          = Exp logop Exp1                   -- binary
               | Exp1
  Exp1         = Exp2 relop Exp2                  -- binary
               | Exp2
  Exp2         = Exp2 addop Exp3                  -- binary
               | Exp3
  Exp3         = Exp3 mulop Exp4                  -- binary
               | Exp4
  Exp4         = prefixop Exp5                    -- negation
               | Exp5
  Exp5         = "(" Exp ")"                      -- parens
               | Literal
               | Lvalue
               | Call
               | ArrayExp
               | DictExp
  PrimType     = "num" | "str" | "bool"
  Type         = PrimType
               | "Arr" "<" PrimType ">"       -- array
               | "Dict" "<" PrimType ">"      -- dict
  Literal      = numlit
               | strlit
               | boollit
  Lvalue       = Lvalue "[" Exp "]"           -- subscripted
               | Lvalue "." id                -- field
               | id                           -- id
  ArrayExp     = "[" Exps "]"
  Field        = id ":" Exp
  DictExp      = "{" ListOf<Field, ","> "}"
  Call         = id "(" ListOf<Exp, ","> ")"
  FunDec       = "function" id (typeId)? "(" ListOf<Param, ","> ")" Body* "~"
  Param        = Type id
  keyword      = ( "chill" | "iph" | "elz" | "returnt" | "fuzzArr" | "num" | "str" | "bool" |
                  "fuzzDict" | "fuzz" | "function" | "while" | "print" | "not" |
                  "cozy" | "not_cozy") ~idrest
  typeId       = id
  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"
  numlit       = digit+ ("." digit+)?
  boollit      = "cozy" | "not_cozy"
  strlit       = "\"" char* "\""
  char         = ~"\\" ~"\"" ~"\n" any | escape
  escape       = "\\" ("\\" | "\"" | "n" | "t")
  mulop        = "**"| "*" | "/"
  addop        = "+" | "-"
  logop        = "&" | "|"
  relop        = "<="| "<" | ">=" | ">" | "not=" | "=="
  prefixop     = "not" | "-"
  space       := " " | "\t" | "\n" | comment
  comment      = "heres the thing:" (~"heres the thing:" any)*
}
